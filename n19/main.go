package main

import (
	"fmt"
	"strings"
	"unicode/utf8"
)

// –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø–æ–¥–∞–≤–∞–µ–º—É—é –Ω–∞ —Ö–æ–¥ —Å—Ç—Ä–æ–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≥–ª–∞–≤—Ä—ã–±–∞ ‚Äî –∞–±—ã—Ä–≤–∞–ª–≥¬ª). –°–∏–º–≤–æ–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å unicode.

// –ï—Å–ª–∏ —è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, —Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç,
// —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥—É—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ç–µ–∂ –∂–µ —Ä—É–Ω, –Ω–æ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

func Reverse(s string) string {
	var builder strings.Builder
	// –ó–∞—Ä–∞–Ω–µ–µ –≤—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å, —á—Ç–æ–±—ã –±—ã–ª –º–∏–Ω–∏–º—É–º –∞–ª–æ–∫–∞—Ü–∏–π
	builder.Grow(len(s))

	for i := len(s); i > 0; {
		// –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä—É–Ω—É —Å –∫–æ–Ω—Ü–∞ —Å—Ä–µ–∑–∞
		r, size := utf8.DecodeLastRuneInString(s[:i])
		builder.WriteRune(r)
		// –£–º–µ–Ω—å—à–∞–µ–º –¥–ª–∏–Ω—É —Å—Ä–µ–∑–∞
		i -= size
	}

	return builder.String()
}

func main() {
	// –ü—Ä–∞–≤–¥–∞ —É —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å—Ç—å –∑–∞–±–∞–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, —á—Ç–æ —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ä–∞—Å–ø–∞–¥–∞—é—Ç—Å—è, –∞ –¥–∏–∞–∫—Ä–∏—Ç–∏–∫–∞ –º–æ–∂–µ—Ç —Å—ä–µ—Ö–∞—Ç—å))
	s1, s2, s3, s4 := "·ÑÖ·Ö¨·Ü´", "üá©üá™", "moÃàp", "–≥–ª–∞–≤—Ä—ã–±–∞"

	fmt.Printf("%s --- %s --- %s \n", s1, Reverse(s1), Reverse(Reverse(s1)))
	fmt.Printf("%s --- %s --- %s \n", s2, Reverse(s2), Reverse(Reverse(s2)))
	fmt.Printf("%s --- %s --- %s \n", s3, Reverse(s3), Reverse(Reverse(s3)))
	fmt.Printf("%s --- %s --- %s \n", s4, Reverse(s4), Reverse(Reverse(s4)))

}
